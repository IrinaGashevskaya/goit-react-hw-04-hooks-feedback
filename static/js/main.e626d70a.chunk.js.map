{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistic/Statistic.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","prpTypes","PropTypes","string","isRequired","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevState","percentage","isNaN","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAGMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,MAIPF,EAAQI,SAAW,CACjBH,MAAOI,IAAUC,OAAOC,YAEXP,Q,gBCKAQ,G,MAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAAQT,UAAU,SAAkCU,KAAK,SAASC,KAAMF,EAAQG,QAASL,EAAzF,SACGE,GAD6BI,IAAQC,mBCcjCC,G,MAnBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,qCACE,oBAAGpB,UAAU,YAAb,mBAAgCgB,KAChC,oBAAGhB,UAAU,YAAb,sBAAmCiB,KACnC,oBAAGjB,UAAU,YAAb,kBAA+BkB,KAC/B,oBAAGlB,UAAU,YAAb,oBAAiCmB,KACjC,oBAAGnB,UAAU,YAAb,gCAA6CoB,EAA7C,aCESC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OCEK,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAEMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GA2B1B,OACE,gCACE,cAAC,EAAD,CAASpB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBQ,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBApBpC,SAAAsB,GACtB,OAAQA,EAAEC,OAAOnB,MACf,IAAK,OACHc,GAAQ,SAAAM,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHL,GAAW,SAAAK,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAUF,cAAC,EAAD,CAASjC,MAAM,YAAf,SAC4B,IAAzB8B,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAxC8B,WACtC,IAAMY,EAAqB,IAAPhB,EAAcY,IAClC,OAAIK,MAAMD,GACD,EAEFE,KAAKC,MAAMH,GAmCUI,UCvDhC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e626d70a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Section.css';\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"section\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nSection.prpTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport './FeedbackOptions.css';\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button className=\"button\" key={shortid.generate()} type=\"button\" name={option} onClick={onLeaveFeedback}>\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Statistic.css';\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p className=\"statistic\">Good: {good}</p>\r\n      <p className=\"statistic\">Neutral: {neutral}</p>\r\n      <p className=\"statistic\">Bad: {bad}</p>\r\n      <p className=\"statistic\">Total: {total}</p>\r\n      <p className=\"statistic\">Positive feedback: {positivePercentage} %</p>\r\n    </>\r\n  );\r\n};\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistic from './components/Statistic/Statistic';\nimport Notification from './components/Notification/Notification';\nimport { useState } from 'react';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    const percentage = (good * 100) / countTotalFeedback();\n    if (isNaN(percentage)) {\n      return 0;\n    }\n    return Math.round(percentage);\n  };\n\n  const onLeaveFeedback = e => {\n    switch (e.target.name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n\n      <Section title=\"Statistic\">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Statistic\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}